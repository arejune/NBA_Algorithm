import requests
import json
import os
from datetime import datetime

API_KEY = "afe51d931dc36e2127002cc7dd7ff528"
SPORT = "basketball_nba"
REGION = "us"
MARKETS = "player_points,player_assists,player_rebounds,player_points_rebounds_assists"
ODDS_FORMAT = "american"
API_BASE = "https://api.the-odds-api.com/v4"

# Define the output directory where files will be saved
OUTPUT_DIR = r"C:\Users\Student\NBA_Algorithm\code\Games"

def american_odds_to_probability(odds):
    """Convert American odds to implied probability percentage"""
    if odds is None:
        return None
   
    if odds > 0:
        # Positive odds: Underdog
        return round(100 / (odds + 100) * 100, 1)
    else:
        # Negative odds: Favorite
        return round(abs(odds) / (abs(odds) + 100) * 100, 1)

def get_team_game(team_name):
    url = f"{API_BASE}/sports/{SPORT}/events?apiKey={API_KEY}&regions={REGION}"
    response = requests.get(url)
   
    # Extract and display the remaining requests info from headers
    if 'x-requests-remaining' in response.headers:
        remaining = response.headers['x-requests-remaining']
        print(f"API Requests Remaining: {remaining}")
    if 'x-requests-used' in response.headers:
        used = response.headers['x-requests-used']
        print(f"API Requests Used: {used}")
   
    # Debug the response
    print(f"Response status code: {response.status_code}")
   
    try:
        events = response.json()
        # Debug the response structure
        if not isinstance(events, list):
            print(f"Warning: API returned {type(events)} instead of list")
            print(f"Response content: {events[:200]}..." if isinstance(events, str) else events)
            return None
           
        print(f"Found {len(events)} events")
       
        for event in events:
            # Ensure event is a dictionary before accessing keys
            if not isinstance(event, dict):
                print(f"Warning: Event is not a dictionary: {event}")
                continue
               
            home_team = event.get('home_team', '')
            away_team = event.get('away_team', '')
           
            if (home_team and team_name.lower() in home_team.lower()) or \
               (away_team and team_name.lower() in away_team.lower()):
                return event  # Return the first future game found
        return None
       
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Response content: {response.text[:200]}...")
        return None

def get_player_props(event_id, team_name=None):
    url = f"{API_BASE}/sports/{SPORT}/events/{event_id}/odds"
    params = {
        "apiKey": API_KEY,
        "regions": REGION,
        "markets": MARKETS,
        "oddsFormat": ODDS_FORMAT
    }
   
    response = requests.get(url, params=params)
   
    # Extract and display the remaining requests info from headers
    if 'x-requests-remaining' in response.headers:
        remaining = response.headers['x-requests-remaining']
        print(f"API Requests Remaining: {remaining}")
    if 'x-requests-used' in response.headers:
        used = response.headers['x-requests-used']
        print(f"API Requests Used: {used}")
   
    try:
        data = response.json()
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Response content: {response.text[:200]}...")
        return {}
   
    props = {}
   
    # Look inside bookmakers
    for bookmaker in data.get("bookmakers", []):
        for market in bookmaker.get("markets", []):
            market_key = market["key"]
           
            if not market_key.startswith("player_"):
                continue
               
            for outcome in market.get("outcomes", []):
                player = outcome.get("description", "")
               
                # Try to extract player name and team
                player_parts = player.split(" - ")
                player_name = player_parts[0] if len(player_parts) > 0 else player
                player_team = player_parts[1] if len(player_parts) > 1 else ""
               
                # If team_name is provided, filter by team
                if team_name and not (team_name.lower() in player.lower() or 
                                    (player_team and team_name.lower() in player_team.lower())):
                    continue
               
                if player not in props:
                    props[player] = {}
               
                # Initialize this market for this player if not exists
                if market_key not in props[player]:
                    props[player][market_key] = {"line": None, "over": None, "under": None}
               
                # Update with the data from this outcome
                if outcome.get("name") == "Over":
                    props[player][market_key]["over"] = outcome.get("price")
                    props[player][market_key]["line"] = outcome.get("point")
                elif outcome.get("name") == "Under":
                    props[player][market_key]["under"] = outcome.get("price")
                    props[player][market_key]["line"] = outcome.get("point")
    return props

def format_props(props):
    if not props:
        print("No player props found.")
        return []
       
    print(f"\nFound props for {len(props)} players:")
    
    formatted_lines = []
    
    for player, markets in sorted(props.items()):
        # Use * instead of emoji for better compatibility
        player_lines = [f"* {player}"]
        for stat, info in markets.items():
            line = info['line']
            over = info['over']
            under = info['under']
           
            # Convert odds to probabilities
            over_prob = american_odds_to_probability(over)
            under_prob = american_odds_to_probability(under)
           
            stat_name = stat.replace('player_', '').upper()
           
            # Format with both odds and probabilities
            player_lines.append(f"  - {stat_name}: {line}")
            if over is not None:
                player_lines.append(f"    OVER: {over} ({over_prob}% implied probability)")
            if under is not None:
                player_lines.append(f"    UNDER: {under} ({under_prob}% implied probability)")
        
        formatted_lines.append("\n".join(player_lines))
        print("\n".join(player_lines))
    
    return formatted_lines

def save_props_to_file(game, props_content):
    # Ensure the output directory exists
    if not os.path.exists(OUTPUT_DIR):
        try:
            os.makedirs(OUTPUT_DIR)
            print(f"Created directory: {OUTPUT_DIR}")
        except Exception as e:
            print(f"Error creating directory {OUTPUT_DIR}: {e}")
            return None
    
    # Create a filename with team names and date
    game_date = datetime.fromisoformat(game['commence_time'].replace('Z', '+00:00'))
    date_str = game_date.strftime('%Y-%m-%d')
    base_filename = f"{game['away_team']}_at_{game['home_team']}_{date_str}_props.txt"
    
    # Replace any invalid characters in filename
    base_filename = base_filename.replace(' ', '_').replace('/', '_')
    
    # Create full path
    full_path = os.path.join(OUTPUT_DIR, base_filename)
    
    # Create a header for the file
    header = [
        f"NBA PLAYER PROPS: {game['away_team']} @ {game['home_team']}",
        f"Game Date: {game_date.strftime('%B %d, %Y at %I:%M %p UTC')}",
        f"Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}",
        "-" * 60,
        ""
    ]
    
    # Write the file with utf-8 encoding
    try:
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write("\n".join(header))
            f.write("\n\n".join(props_content))
        
        print(f"\nSaved all props to: {full_path}")
        return full_path
    except Exception as e:
        print(f"Error writing file: {e}")
        
        # Fallback to basic ASCII encoding
        try:
            with open(full_path, 'w', encoding='ascii', errors='replace') as f:
                f.write("\n".join(header))
                f.write("\n\n".join(props_content))
            
            print(f"\nSaved all props to: {full_path} (with limited character support)")
            return full_path
        except Exception as e2:
            print(f"Failed to save file even with ASCII encoding: {e2}")
            return None

def git_add_commit_push(file_path, commit_message=None):
    """Add the file to git, commit it and push"""
    try:
        import subprocess
        
        # Default commit message if none provided
        if not commit_message:
            commit_message = f"Added player props file: {os.path.basename(file_path)}"
        
        # Check if we're in a git repository
        result = subprocess.run(['git', 'rev-parse', '--is-inside-work-tree'], 
                              capture_output=True, text=True)
        
        if result.returncode != 0:
            print("Not inside a git repository. Skipping git operations.")
            return False
        
        # Add the file
        subprocess.run(['git', 'add', file_path], check=True)
        print(f"Added {file_path} to git")
        
        # Commit the file
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        print(f"Committed changes with message: {commit_message}")
        
        # Push the changes
        subprocess.run(['git', 'push'], check=True)
        print("Successfully pushed changes to remote repository")
        
        return True
    except Exception as e:
        print(f"Error during git operations: {e}")
        return False

if __name__ == "__main__":
    team = input("Enter the NBA team you're interested in: ")
    game = get_team_game(team)
    if not game:
        print("No upcoming game found for that team.")
    else:
        print(f"Found game: {game['home_team']} vs {game['away_team']} on {game['commence_time']}")
        
        # Get props for BOTH teams in the game, not just the team entered
        print("\nFetching props for ALL players in this game...")
        props = get_player_props(game['id'])  # Not filtering by team to get all players
        
        if props:
            formatted_props = format_props(props)
            if formatted_props:
                file_path = save_props_to_file(game, formatted_props)
                if file_path:
                    # Attempt to commit and push the file to git
                    git_add_commit_push(file_path)
        else:
            print("No player props available yet for this game.")
