import requests
import json
import os
import argparse
from datetime import datetime

API_KEY = "afe51d931dc36e2127002cc7dd7ff528"
SPORT = "basketball_nba"
REGION = "us"
MARKETS = "player_points,player_assists,player_rebounds,player_points_rebounds_assists"
ODDS_FORMAT = "american"
API_BASE = "https://api.the-odds-api.com/v4"

# Define the output directory where files will be saved
OUTPUT_DIR = r"C:\Users\Student\Desktop\NBA_Algorithm\code\games"

def american_odds_to_probability(odds):
    if odds is None:
        return None
    return round(100 / (odds + 100) * 100, 1) if odds > 0 else round(abs(odds) / (abs(odds) + 100) * 100, 1)

def get_team_game(team_name):
    url = f"{API_BASE}/sports/{SPORT}/events?apiKey={API_KEY}&regions={REGION}"
    response = requests.get(url)
    if 'x-requests-remaining' in response.headers:
        print(f"API Requests Remaining: {response.headers['x-requests-remaining']}")
    if 'x-requests-used' in response.headers:
        print(f"API Requests Used: {response.headers['x-requests-used']}")
    print(f"Response status code: {response.status_code}")
    
    try:
        events = response.json()
        if not isinstance(events, list):
            print(f"Warning: Unexpected response format: {type(events)}")
            return None
        print(f"Found {len(events)} events")
        for event in events:
            home_team = event.get('home_team', '')
            away_team = event.get('away_team', '')
            if (home_team and team_name.lower() in home_team.lower()) or \
               (away_team and team_name.lower() in away_team.lower()):
                return event
        return None
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Response content: {response.text[:200]}...")
        return None

def get_player_props(event_id, team_name=None):
    url = f"{API_BASE}/sports/{SPORT}/events/{event_id}/odds"
    params = {
        "apiKey": API_KEY,
        "regions": REGION,
        "markets": MARKETS,
        "oddsFormat": ODDS_FORMAT
    }
    response = requests.get(url, params=params)
    if 'x-requests-remaining' in response.headers:
        print(f"API Requests Remaining: {response.headers['x-requests-remaining']}")
    if 'x-requests-used' in response.headers:
        print(f"API Requests Used: {response.headers['x-requests-used']}")
    
    try:
        data = response.json()
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Response content: {response.text[:200]}...")
        return {}

    props = {}
    for bookmaker in data.get("bookmakers", []):
        for market in bookmaker.get("markets", []):
            market_key = market["key"]
            if not market_key.startswith("player_"):
                continue
            for outcome in market.get("outcomes", []):
                player = outcome.get("description", "")
                player_parts = player.split(" - ")
                player_name = player_parts[0] if len(player_parts) > 0 else player
                player_team = player_parts[1] if len(player_parts) > 1 else ""
                if team_name and not (team_name.lower() in player.lower() or 
                                    (player_team and team_name.lower() in player_team.lower())):
                    continue
                if player not in props:
                    props[player] = {}
                if market_key not in props[player]:
                    props[player][market_key] = {"line": None, "over": None, "under": None}
                if outcome.get("name") == "Over":
                    props[player][market_key]["over"] = outcome.get("price")
                    props[player][market_key]["line"] = outcome.get("point")
                elif outcome.get("name") == "Under":
                    props[player][market_key]["under"] = outcome.get("price")
                    props[player][market_key]["line"] = outcome.get("point")
    return props

def format_props_to_json(props):
    if not props:
        print("No player props found.")
        return None
    print(f"\nFound props for {len(props)} players:")
    json_data = {"players": []}
    for player, markets in sorted(props.items()):
        player_data = {
            "name": player.split(" - ")[0],
            "team": player.split(" - ")[1] if " - " in player else "",
            "markets": []
        }
        for stat, info in markets.items():
            line = info['line']
            over = info['over']
            under = info['under']
            over_prob = american_odds_to_probability(over)
            under_prob = american_odds_to_probability(under)
            market_data = {
                "stat": stat.replace('player_', ''),
                "line": line,
                "over": {"odds": over, "implied_probability": over_prob},
                "under": {"odds": under, "implied_probability": under_prob}
            }
            player_data["markets"].append(market_data)
            print(f"* {player} - {stat.upper()}: {line} (Over: {over}, Under: {under})")
        json_data["players"].append(player_data)
    return json_data

def save_props_to_json(game, props_data):
    if not os.path.exists(OUTPUT_DIR):
        try:
            os.makedirs(OUTPUT_DIR)
            print(f"Created directory: {OUTPUT_DIR}")
        except Exception as e:
            print(f"Error creating directory {OUTPUT_DIR}: {e}")
            return None
    game_date = datetime.fromisoformat(game['commence_time'].replace('Z', '+00:00'))
    date_str = game_date.strftime('%Y-%m-%d')
    base_filename = f"{game['away_team']}_at_{game['home_team']}_{date_str}_props.json"
    base_filename = base_filename.replace(' ', '_').replace('/', '_')
    full_path = os.path.join(OUTPUT_DIR, base_filename)
    output_json = {
        "metadata": {
            "game": {
                "away_team": game['away_team'],
                "home_team": game['home_team'],
                "commence_time": game['commence_time'],
                "formatted_date": game_date.strftime('%B %d, %Y at %I:%M %p UTC')
            },
            "generated_at": datetime.now().isoformat()
        },
        "props": props_data
    }
    try:
        with open(full_path, 'w', encoding='utf-8') as f:
            json.dump(output_json, f, indent=2, ensure_ascii=False)
        print(f"\nSaved all props to JSON: {full_path}")
        return full_path
    except Exception as e:
        print(f"Error writing JSON file: {e}")
        return None

def git_add_commit_push(file_path, commit_message=None):
    try:
        import subprocess
        if not commit_message:
            commit_message = f"Added player props JSON file: {os.path.basename(file_path)}"
        result = subprocess.run(['git', 'rev-parse', '--is-inside-work-tree'], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            print("Not inside a git repository. Skipping git operations.")
            return False
        subprocess.run(['git', 'add', file_path], check=True)
        print(f"Added {file_path} to git")
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        print(f"Committed changes with message: {commit_message}")
        subprocess.run(['git', 'push'], check=True)
        print("Successfully pushed changes to remote repository")
        return True
    except Exception as e:
        print(f"Error during git operations: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Fetch NBA player prop bets for a given team.")
    parser.add_argument('--team', type=str, required=True, help="NBA team name (e.g., 'Lakers')")
    args = parser.parse_args()

    team_name = args.team
    game = get_team_game(team_name)
    if not game:
        print("No upcoming game found for that team.")
        return

    print(f"Found game: {game['home_team']} vs {game['away_team']} on {game['commence_time']}")
    print("\nFetching props for ALL players in this game...")
    props = get_player_props(game['id'])

    if props:
        json_data = format_props_to_json(props)
        if json_data:
            file_path = save_props_to_json(game, json_data)
            if file_path:
                git_add_commit_push(file_path)
    else:
        print("No player props available yet for this game.")

if __name__ == "__main__":
    main()
