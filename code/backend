import requests
import json
import os
from datetime import datetime
import pandas as pd
import numpy as np
import re
from bs4 import BeautifulSoup
from scipy import stats
from io import StringIO
from flask import Flask, jsonify, request
from flask_cors import CORS

API_KEY = "afe51d931dc36e2127002cc7dd7ff528"  # Replace with your actual API key
SPORT = "basketball_nba"
REGION = "us"
MARKETS = "player_points,player_assists,player_rebounds,player_points_rebounds_assists"
ODDS_FORMAT = "american"
API_BASE = "https://api.the-odds-api.com/v4"

OUTPUT_DIR = "games_data"  # Relative directory for local saving

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

def american_odds_to_probability(odds):
    """Convert American odds to implied probability percentage"""
    if odds is None:
        return None
    
    if odds > 0:
        # Positive odds: Underdog
        return round(100 / (odds + 100) * 100, 1)
    else:
        # Negative odds: Favorite
        return round(abs(odds) / (abs(odds) + 100) * 100, 1)

def get_team_game(team_name):
    """Get upcoming game for a team"""
    url = f"{API_BASE}/sports/{SPORT}/events?apiKey={API_KEY}&regions={REGION}"
    response = requests.get(url)
    
    if 'x-requests-remaining' in response.headers:
        remaining = response.headers['x-requests-remaining']
        print(f"API Requests Remaining: {remaining}")
    if 'x-requests-used' in response.headers:
        used = response.headers['x-requests-used']
        print(f"API Requests Used: {used}")
    
    try:
        events = response.json()
        if not isinstance(events, list):
            print(f"Warning: API returned {type(events)} instead of list")
            print(f"Response content: {events[:200]}..." if isinstance(events, str) else events)
            return None
        
        for event in events:
            if not isinstance(event, dict):
                print(f"Warning: Event is not a dictionary: {event}")
                continue
            
            home_team = event.get('home_team', '')
            away_team = event.get('away_team', '')
            
            if (home_team and team_name.lower() in home_team.lower()) or \
               (away_team and team_name.lower() in away_team.lower()):
                return event
        return None
        
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Response content: {response.text[:200]}...")
        return None

def get_player_props(event_id, team_name=None):
    """Get player props for a specific event"""
    url = f"{API_BASE}/sports/{SPORT}/events/{event_id}/odds"
    params = {
        "apiKey": API_KEY,
        "regions": REGION,
        "markets": MARKETS,
        "oddsFormat": ODDS_FORMAT
    }
    
    response = requests.get(url, params=params)
    
    if 'x-requests-remaining' in response.headers:
        remaining = response.headers['x-requests-remaining']
        print(f"API Requests Remaining: {remaining}")
    if 'x-requests-used' in response.headers:
        used = response.headers['x-requests-used']
        print(f"API Requests Used: {used}")
    
    try:
        data = response.json()
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Response content: {response.text[:200]}...")
        return {}
    
    props = {}
    
    for bookmaker in data.get("bookmakers", []):
        for market in bookmaker.get("markets", []):
            market_key = market["key"]
            
            if not market_key.startswith("player_"):
                continue
            
            for outcome in market.get("outcomes", []):
                player = outcome.get("description", "")
                
                player_parts = player.split(" - ")
                player_name = player_parts[0] if player_parts else player
                player_team = player_parts[-1] if len(player_parts) > 1 else ""
                
                if team_name and not (team_name.lower() in player.lower() or
                                    (player_team and team_name.lower() in player_team.lower())):
                    continue
                
                if player not in props:
                    props[player] = {}
                
                if market_key not in props[player]:
                    props[player][market_key] = {"line": None, "over": None, "under": None}
                
                if outcome.get("name") == "Over":
                    props[player][market_key]["over"] = outcome.get("price")
                    props[player][market_key]["line"] = outcome.get("point")
                elif outcome.get("name") == "Under":
                    props[player][market_key]["under"] = outcome.get("price")
                    props[player][market_key]["line"] = outcome.get("point")
    
    return props

def format_props_to_json(props):
    """Convert props data to structured JSON format"""
    if not props:
        return None
    
    players_data = []
    for player_full, markets in sorted(props.items()):
        player_info = {"name": player_full, "markets": []}
        parts = player_full.split(" - ")
        if len(parts) > 1:
            player_info["name"] = parts[0]
            player_info["team"] = parts[-1]
        
        for stat, info in markets.items():
            line = info['line']
            over = info['over']
            under = info['under']
            
            over_prob = american_odds_to_probability(over)
            under_prob = american_odds_to_probability(under)
            
            stat_name = stat.replace('player_', '')
            
            market_data = {
                "stat": stat_name,
                "line": line,
                "over": {"odds": over, "implied_probability": over_prob},
                "under": {"odds": under, "implied_probability": under_prob},
            }
            player_info["markets"].append(market_data)
        players_data.append(player_info)
    
    return {"players": players_data}

def save_props_to_json(game, props_data):
    """Save the props data as a JSON file"""
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    game_date = datetime.fromisoformat(game['commence_time'].replace('Z', '+00:00'))
    date_str = game_date.strftime('%Y-%m-%d')
    base_filename = f"{game['away_team']}_at_{game['home_team']}_{date_str}_props.json"
    base_filename = base_filename.replace(' ', '_').replace('/', '_')
    full_path = os.path.join(OUTPUT_DIR, base_filename)
    
    output_json = {
        "metadata": {
            "game": {
                "away_team": game['away_team'],
                "home_team": game['home_team'],
                "commence_time": game['commence_time'],
                "formatted_date": game_date.strftime('%B %d, %Y at %I:%M %p UTC'),
            },
            "generated_at": datetime.now().isoformat(),
        },
        "props": props_data,
    }
    
    with open(full_path, 'w', encoding='utf-8') as f:
        json.dump(output_json, f, indent=2, ensure_ascii=False)
    return full_path

def create_player_playoff_url(first_name, last_name, season=None):
    """Create the correct Basketball Reference URL for a player's playoff data"""
    first_name = first_name.strip().lower()
    last_name = last_name.strip().lower()
    
    first_letter = last_name[:1]
    last_name_part = last_name[:5]
    first_name_part = first_name[:2]
    
    player_id = f"{last_name_part}{first_name_part}01"
    
    if season:
        base_url = f"https://www.basketball-reference.com/players/{first_letter}/{player_id}/gamelog-playoffs/{season}"
    else:
        base_url = f"https://www.basketball-reference.com/players/{first_letter}/{player_id}/gamelog-playoffs/#player_game_log_post"
    
    try:
        response = requests.get(base_url, headers={'User-Agent': 'Mozilla/5.0'})
        if response.status_code == 200:
            return base_url, player_id
        return None, None
    except Exception as e:
        print(f"Error accessing URL: {e}")
        return None, None

def get_playoff_games(player_url):
    """Fetches and returns all available playoff games of a player"""
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(player_url, headers=headers)
        response.raise_for_status()  # Raise an exception for bad status codes
        
        soup = BeautifulSoup(response.content, 'html.parser')
        playoff_tables = []
        table_patterns = [
            re.compile(r'pgl_basic_playoffs'),
            re.compile(r'playoffs_.*'),
            re.compile(r'post_.*')
        ]
        
        for pattern in table_patterns:
            tables = soup.find_all('table', id=pattern)
            if tables:
                playoff_tables.extend(tables)
        
        if not playoff_tables:
            for table in soup.find_all('table'):
                caption = table.find('caption')
                if caption and ('playoff' in caption.text.lower() or 'post' in caption.text.lower()):
                    playoff_tables.append(table)
                if table.has_attr('class') and any('playoff' in c.lower() for c in table['class']):
                    playoff_tables.append(table)
        
        if not playoff_tables:
            playoff_divs = soup.find_all('div', id=re.compile(r'div_playoffs'))
            for div in playoff_divs:
                tables = div.find_all('table')
                playoff_tables.extend(tables)
        
        if not playoff_tables:
            print(f"No playoff tables found at {player_url}")
            return None
        
        all_playoff_data = []
        for table in playoff_tables:
            html = str(table)
            try:
                dfs = pd.read_html(StringIO(html))
                if not dfs:
                    continue
                df = dfs[0].copy()
                
                if 'Rk' in df.columns:
                    df = df[~df['Rk'].isin(['Rk', 'TOT'])].copy()
                    df['Rk'] = pd.to_numeric(df['Rk'], errors='coerce')
                    df = df[df['Rk'].notna()].copy()
                
                season = "Unknown"
                if table.get('id'):
                    season_match = re.search(r'playoffs_(\d+)', table.get('id', ''))
                    if season_match:
                        season = season_match.group(1)
                else:
                    for element in table.previous_siblings:
                        if hasattr(element, 'text') and re.search(r'20\d{2}-\d{2}', element.text):
                            season_match = re.search(r'20\d{2}-\d{2}', element.text)
                            if season_match:
                                season = season_match.group(0)
                                break
                
                df['Series'] = df['Opp'].apply(lambda x: x if pd.notna(x) else '')
                
                game_col = None
                for possible_col in ['Gm', 'G', 'Game', '#']:
                    if possible_col in df.columns:
                        game_col = possible_col
                        break
                
                if game_col:
                    df['Game_In_Series'] = df[game_col].apply(
                        lambda x: int(x) if pd.notna(x) and str(x).isdigit() else 0)
                else:
                    df['Game_In_Series'] = 0
                
                if 'Gm' not in df.columns:
                    if game_col:
                        df['Gm'] = df[game_col]
                    else:
                        df['Gm'] = df['Game_In_Series']
                
                df['Season'] = season
                
                required_cols = ['PTS', 'AST', 'TRB', 'MP', 'Date', 'Opp', 'Result']
                for col in required_cols:
                    if col not in df.columns:
                        if col == 'PTS' and 'PT' in df.columns:
                            df['PTS'] = df['PT']
                        elif col == 'TRB' and 'REB' in df.columns:
                            df['TRB'] = df['REB']
                        else:
                            df[col] = np.nan
                
                all_playoff_data.append(df)
                
            except Exception as e:
                print(f"Error processing table: {e}")
                continue
        
        if all_playoff_data:
            combined_df = pd.concat(all_playoff_data, ignore_index=True)
            if 'Rk' in combined_df.columns:
                combined_df['Rk'] = pd.to_numeric(combined_df['Rk'], errors='coerce')
                combined_df = combined_df[combined_df['Rk'].notna()].copy()
            
            for col in combined_df.columns:
                if combined_df[col].dtype == 'object':
                    combined_df = combined_df[~combined_df[col].astype(str).str.contains('Total', case=False, na=False)].copy()
            
            combined_df['Date'] = pd.to_datetime(combined_df['Date'], errors='coerce')
            
            numeric_cols = ['PTS', 'AST', 'TRB', 'MP', 'FG', 'FGA', '3P', '3PA', '2P', '2PA', 'FT', 'FTA',
                           'ORB', 'DRB', 'STL', 'BLK', 'TOV', 'PF', '+/-']
            for col in numeric_cols:
                if col in combined_df.columns:
                    combined_df[col] = pd.to_numeric(combined_df[col], errors='coerce')
            
            if all(col in combined_df.columns for col in ['PTS', 'AST', 'TRB']):
                combined_df['PRA'] = combined_df['PTS'] + combined_df['AST'] + combined_df['TRB']
            
            combined_df = combined_df.sort_values(by='Date', ascending=False)
            
            return combined_df
        else:
            print(f"No playoff data found for player at {player_url}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error fetching playoff data: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None

def extract_series_info(df):
    """Extract playoff series information from the dataframe"""
    if df is None or df.empty:
        return None
    
    series_df = df.copy()
    
    if 'Rk' in series_df.columns:
        series_df['Rk'] = pd.to_numeric(series_df['Rk'], errors='coerce')
        series_df = series_df[series_df['Rk'].notna()].copy()
    
    def create_series_info(row):
        season = row['Season'] if 'Season' in row and pd.notna(row['Season']) else 'Unknown'
        opponent = row['Opp'] if 'Opp' in row and pd.notna(row['Opp']) else 'Unknown'
        game = row['Gm'] if 'Gm' in row and pd.notna(row['Gm']) else (
            row['Game_In_Series'] if 'Game_In_Series' in row and pd.notna(row['Game_In_Series']) else 'Unknown')
        return f"{season} - {opponent} - Game {game}"
    
    series_df['Series_Info'] = series_df.apply(create_series_info, axis=1)
    
    def create_series_id(row):
        season = row['Season'] if 'Season' in row and pd.notna(row['Season']) else 'Unknown'
        opponent = row['Opp'] if 'Opp' in row and pd.notna(row['Opp']) else 'Unknown'
        return f"{season}_{opponent}"
    
    series_df['Series_ID'] = series_df.apply(create_series_id, axis=1)
    
    return series_df

def get_games_vs_team(df, team_abbr):
    """Filter games against a specific team"""
    if df is None or df.empty:
        return None
    
    team_games = df[df['Opp'].str.contains(team_abbr, na=False)].copy()
    return team_games

def calculate_playoff_stats(df, team_abbr=None):
    """Calculate playoff statistics for a player"""
    if df is None or df.empty:
        return None, None
    
    df_clean = df.copy()
    
    if 'Rk' in df_clean.columns:
        df_clean['Rk'] = pd.to_numeric(df_clean['Rk'], errors='coerce')
        df_clean = df_clean[df_clean['Rk'].notna()].copy()
    
    for col in df_clean.columns:
        if df_clean[col].dtype == 'object':
            df_clean = df_clean[~df_clean[col].astype(str).str.contains('Total', case=False, na=False)].copy()
    
    series_df = extract_series_info(df_clean)
    
    for col in ['PTS', 'AST', 'TRB']:
        if col in series_df.columns:
            series_df[col] = pd.to_numeric(series_df[col], errors='coerce')
    
    valid_data = series_df[series_df['PTS'].notna()].copy()
    
    playoff_avg = {
        'PTS': valid_data['PTS'].mean() if not valid_data.empty else np.nan,
        'AST': valid_data['AST'].mean() if not valid_data.empty else np.nan,
        'TRB': valid_data['TRB'].mean() if not valid_data.empty else np.nan,
        'PRA': valid_data['PRA'].mean() if 'PRA' in valid_data.columns and not valid_data.empty else np.nan
    }
    
    playoff_std = {
        'PTS': valid_data['PTS'].std() if not valid_data.empty else np.nan,
        'AST': valid_data['AST'].std() if not valid_data.empty else np.nan,
        'TRB': valid_data['TRB'].std() if not valid_data.empty else np.nan,
        'PRA': valid_data['PRA'].std() if 'PRA' in valid_data.columns and not valid_data.empty else np.nan
    }
    
    last_10_games = valid_data.head(10)
    
    last_10_avg = {
        'PTS': last_10_games['PTS'].mean() if not last_10_games.empty else np.nan,
        'AST': last_10_games['AST'].mean() if not last_10_games.empty else np.nan,
        'TRB': last_10_games['TRB'].mean() if not last_10_games.empty else np.nan,
        'PRA': last_10_games['PRA'].mean() if 'PRA' in last_10_games.columns and not last_10_games.empty else np.nan
    }
    
    last_10_std = {
        'PTS': last_10_games['PTS'].std() if not last_10_games.empty else np.nan,
        'AST': last_10_games['AST'].std() if not last_10_games.empty else np.nan,
        'TRB': last_10_games['TRB'].std() if not last_10_games.empty else np.nan,
        'PRA': last_10_games['PRA'].std() if 'PRA' in last_10_games.columns and not last_10_games.empty else np.nan
    }
    
    if team_abbr:
        team_games = get_games_vs_team(valid_data, team_abbr)
        if team_games is not None and not team_games.empty:
            team_avg = {
                'PTS': team_games['PTS'].mean(),
                'AST': team_games['AST'].mean(),
                'TRB': team_games['TRB'].mean(),
                'PRA': team_games['PRA'].mean() if 'PRA' in team_games.columns else np.nan
            }
            team_std = {
                'PTS': team_games['PTS'].std(),
                'AST': team_games['AST'].std(),
                'TRB': team_games['TRB'].std(),
                'PRA': team_games['PRA'].std() if 'PRA' in team_games.columns else np.nan
            }
        else:
            team_avg = {stat: float('nan') for stat in ['PTS', 'AST', 'TRB', 'PRA']}
            team_std = {stat: float('nan') for stat in ['PTS', 'AST', 'TRB', 'PRA']}
    else:
        team_avg = {stat: float('nan') for stat in ['PTS', 'AST', 'TRB', 'PRA']}
        team_std = {stat: float('nan') for stat in ['PTS', 'AST', 'TRB', 'PRA']}
    
    stats_df = pd.DataFrame({
        'Stat': ['PTS', 'AST', 'TRB', 'PRA'],
        'Playoff Career Avg': [playoff_avg['PTS'], playoff_avg['AST'], playoff_avg['TRB'], playoff_avg['PRA']],
        'Last 10 Playoff Games Avg': [last_10_avg['PTS'], last_10_avg['AST'], last_10_avg['TRB'], last_10_avg['PRA']],
        f'Vs {team_abbr} Playoff Avg': [team_avg['PTS'], team_avg['AST'], team_avg['TRB'], team_avg['PRA']]
    })
    
    std_df = pd.DataFrame({
        'Stat': ['PTS', 'AST', 'TRB', 'PRA'],
        'Playoff Career StdDev': [playoff_std['PTS'], playoff_std['AST'], playoff_std['TRB'], playoff_std['PRA']],
        'Last 10 Playoff Games StdDev': [last_10_std['PTS'], last_10_std['AST'], last_10_std['TRB'], last_10_std['PRA']],
        f'Vs {team_abbr} Playoff StdDev': [team_std['PTS'], team_std['AST'], team_std['TRB'], team_std['PRA']]
    })
    
    for col in stats_df.columns[1:]:
        stats_df[col] = stats_df[col].round(1)
    for col in std_df.columns[1:]:
        std_df[col] = std_df[col].round(1)
    
    return stats_df, std_df

def get_team_abbreviation_map():
    """Returns a dictionary mapping team names to their abbreviations"""
    return {
        "atlanta": "ATL", "hawks": "ATL",
        "boston": "BOS", "celtics": "BOS",
        "brooklyn": "BRK", "nets": "BRK",
        "charlotte": "CHO", "hornets": "CHO",
        "chicago": "CHI", "bulls": "CHI",
        "cleveland": "CLE", "cavaliers": "CLE", "cavs": "CLE",
        "dallas": "DAL", "mavericks": "DAL", "mavs": "DAL",
        "denver": "DEN", "nuggets": "DEN",
        "detroit": "DET", "pistons": "DET",
        "golden state": "GSW", "warriors": "GSW",
        "houston": "HOU", "rockets": "HOU",
        "indiana": "IND", "pacers": "IND",
        "la clippers": "LAC", "los angeles clippers": "LAC", "clippers": "LAC",
        "la lakers": "LAL", "los angeles lakers": "LAL", "lakers": "LAL",
        "memphis": "MEM", "grizzlies": "MEM",
        "miami": "MIA", "heat": "MIA",
        "milwaukee": "MIL", "bucks": "MIL",
        "minnesota": "MIN", "timberwolves": "MIN", "wolves": "MIN",
        "new orleans": "NOP", "pelicans": "NOP", "pels": "NOP",
        "new york": "NYK", "knicks": "NYK",
        "oklahoma city": "OKC", "thunder": "OKC",
        "orlando": "ORL", "magic": "ORL",
        "philadelphia": "PHI", "76ers": "PHI", "sixers": "PHI",
        "phoenix": "PHO", "suns": "PHO",
        "portland": "POR", "trail blazers": "POR", "blazers": "POR",
        "sacramento": "SAC", "kings": "SAC",
        "san antonio": "SAS", "spurs": "SAS",
        "toronto": "TOR", "raptors": "TOR",
        "utah": "UTA", "jazz": "UTA",
        "washington": "WAS", "wizards": "WAS"
    }

# API Routes

@app.route('/api/get_game/<team_name>', methods=['GET'])
def api_get_game(team_name):
    """API endpoint to get upcoming game for a team"""
    game = get_team_game(team_name)
    if game:
        return jsonify(game)
    else:
        return jsonify({'error': 'No upcoming game found for that team.'}), 404

@app.route('/api/get_props/<event_id>', methods=['GET'])
def api_get_props(event_id):
    """API endpoint to get player props for a game"""
    team_name = request.args.get('team')
    props = get_player_props(event_id, team_name)
    if props:
        formatted_props = format_props_to_json(props)
        return jsonify(formatted_props)
    else:
        return jsonify({'error': 'No player props available for this game.'}), 404

@app.route('/api/playoff_stats', methods=['GET'])
def api_playoff_stats():
    """API endpoint to get playoff stats for a player"""
    first_name = request.args.get('first_name')
    last_name = request.args.get('last_name')
    team_input = request.args.get('opponent_team', '').lower()
    
    if not first_name or not last_name:
        return jsonify({'error': 'Please provide the player\'s first and last name.'}), 400
    
    team_map = get_team_abbreviation_map()
    team_abbr = None
    team_abbr_upper = team_input.upper()
    if team_abbr_upper in [abbr for abbr in team_map.values()]:
        team_abbr = team_abbr_upper
    else:
        for name, abbr in team_map.items():
            if team_input in name:
                team_abbr = abbr
                break
    
    player_url, _ = create_player_playoff_url(first_name, last_name)
    if not player_url:
        return jsonify({'error': 'Could not find playoff data for this player.'}), 404
    
    all_playoff_games = get_playoff_games(player_url)
    if all_playoff_games is None or all_playoff_games.empty:
        return jsonify({'error': 'No playoff games found for this player.'}), 404
    
    stats_df, std_df = calculate_playoff_stats(all_playoff_games, team_abbr)
    
    if stats_df is not None and std_df is not None:
        return jsonify({
            'stats': stats_df.to_dict(orient='records'),
            'std': std_df.to_dict(orient='records')
        })
    else:
        return jsonify({'error': 'Error calculating playoff statistics.'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    return jsonify({'status': 'ok', 'message': 'API is running'}), 200

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
