<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NBA Stats Predictor</title>
    <style>
        :root {
            --primary-color: #1d428a;
            --secondary-color: #c8102e;
            --text-color: #333;
            --bg-color: #f8f9fa;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }
        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
        }
        .header {
            background-color: var(--primary-color);
            color: white;
            padding: 2rem 0;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            opacity: 0;
        }
        .header p {
            opacity: 0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        .feature-card {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease-out;
        }
        .feature-card h2 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-size: 1.8rem;
        }
        .feature-card p {
            margin-bottom: 1rem;
        }
        .cta-button {
            display: inline-block;
            background-color: var(--secondary-color);
            color: white;
            padding: 1rem 2rem;
            border-radius: 4px;
            text-decoration: none;
            font-weight: bold;
            margin-top: 1rem;
            transition: all 0.3s ease;
            transform: translateY(0);
            cursor: pointer;
        }
        .cta-button:hover {
            background-color: #a00d24;
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .cta-button:active {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        .feature-box {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            opacity: 0;
            transform: translateX(-20px);
            transition: all 0.5s ease-out;
        }
        .feature-box h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        .feature-box ul, .feature-box ol {
            padding-left: 1.5rem;
        }
        /* Animation Classes */
        .fade-in {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease-out;
        }
        .slide-in {
            opacity: 0;
            transform: translateX(-20px);
            transition: all 0.5s ease-out;
        }
        .fade-in.active, .slide-in.active {
            opacity: 1;
            transform: translate(0);
        }
        .bounce {
            animation: none;
        }
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }
        .bounce:hover {
            animation: bounce 1s;
        }
        
        /* Predictor Tool Styles */
        #predictor-tool {
            display: none;
            background: white;
            border-radius: 8px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        #predictor-tool.active {
            display: block;
        }
        .form-group {
            margin-bottom: 1.5rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: var(--primary-color);
        }
        select, input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        .prediction-result {
            background-color: #f0f8ff;
            border-left: 4px solid var(--primary-color);
            padding: 1rem;
            margin-top: 1.5rem;
            display: none;
        }
        .prediction-result.active {
            display: block;
        }
        .close-button {
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 1rem;
        }
        .stat-value {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary-color);
        }
        .probability {
            font-size: 1.1rem;
            color: var(--secondary-color);
            font-weight: bold;
        }
    </style>
</head>
<body>
    <header class="header">
        <h1 class="fade-in">NBA Stats Predictor</h1>
        <p class="slide-in">Enhance your NBA watching experience with data-driven predictions</p>
        <a href="#try-now" class="cta-button bounce">Try It Now</a>
    </header>
    <main class="container">
        <section class="feature-card fade-in">
            <h2>About Our Project</h2>
            <p>Welcome to NBA Stats Predictor, where we combine the excitement of NBA basketball with data science. Our platform uses a custom algorithm to predict player statistics, helping fans engage more deeply with the game they love.</p>
            <p>While our predictions may not have a real edge against betting lines, they offer a fun and interactive way to enhance your NBA viewing experience and test your basketball knowledge.</p>
        </section>
        <div class="features-grid">
            <div class="feature-box slide-in">
                <h3>Key Features</h3>
                <ul>
                    <li>Player stat predictions</li>
                    <li>Over/under probability calculations</li>
                    <li>Historical data analysis</li>
                    <li>User-friendly interface</li>
                </ul>
            </div>
            <div class="feature-box slide-in" data-delay="200">
                <h3>How It Works</h3>
                <ol>
                    <li>Select a player</li>
                    <li>Choose stat category</li>
                    <li>Enter current betting line</li>
                    <li>Get instant predictions</li>
                </ol>
            </div>
            <div class="feature-box slide-in" data-delay="400">
                <h3>Technology Stack</h3>
                <ul>
                    <li>HTML, CSS, JavaScript</li>
                    <li>Real-time API integration</li>
                    <li>Advanced data analysis</li>
                    <li>Web scraping capabilities</li>
                </ul>
            </div>
        </div>
        <section id="try-now" class="feature-card fade-in">
            <h2>Ready to Get Started?</h2>
            <p>Join our community of NBA enthusiasts and start making your own predictions today. Our platform is designed for fans who want to deepen their understanding of the game through data analysis.</p>
            <a id="launch-button" class="cta-button bounce">Launch Predictor</a>
        </section>
        
        <!-- Predictor Tool -->
        <section id="predictor-tool">
            <h2>NBA Stats Predictor Tool</h2>
            <p>Use the form below to get statistical predictions for NBA players.</p>
            
            <div class="form-group">
                <label for="player-select">Select Player</label>
                <select id="player-select">
                    <option value="">Choose a player</option>
                    <option value="lebron">LeBron James</option>
                    <option value="curry">Stephen Curry</option>
                    <option value="doncic">Luka Dončić</option>
                    <option value="jokic">Nikola Jokić</option>
                    <option value="embiid">Joel Embiid</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="stat-category">Select Stat Category</label>
                <select id="stat-category">
                    <option value="">Choose a category</option>
                    <option value="points">Points</option>
                    <option value="rebounds">Rebounds</option>
                    <option value="assists">Assists</option>
                    <option value="threes">3-Pointers</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="betting-line">Current Betting Line</label>
                <input type="number" id="betting-line" step="0.5" placeholder="Enter the current line (e.g., 25.5)">
            </div>
            
            <a id="predict-button" class="cta-button">Get Prediction</a>
            <button id="close-predictor" class="close-button">Close Predictor</button>
            
            <div id="prediction-result" class="prediction-result">
                <h3>Prediction Results</h3>
                <p>Player: <span id="result-player"></span></p>
                <p>Predicted <span id="result-category"></span>: <span id="result-value" class="stat-value"></span></p>
                <p>Probability of Over <span id="result-line"></span>: <span id="result-probability" class="probability"></span></p>
                <p class="disclaimer">Note: This prediction is for entertainment purposes only.</p>
            </div>
        </section>
    </main>

    <script>
        // Intersection Observer for scroll animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('active');
                }
            });
        }, {
            threshold: 0.1
        });

        // Observe all elements with animation classes
        document.addEventListener('DOMContentLoaded', () => {
            // Initial animations
            setTimeout(() => {
                document.querySelector('.header h1').classList.add('active');
            }, 500);
            setTimeout(() => {
                document.querySelector('.header p').classList.add('active');
            }, 1000);

            // Scroll animations
            const animatedElements = document.querySelectorAll('.fade-in, .slide-in');
            animatedElements.forEach(el => {
                observer.observe(el);
            });

            // Add delay to feature boxes
            const featureBoxes = document.querySelectorAll('.feature-box');
            featureBoxes.forEach((box, index) => {
                const delay = index * 200;
                box.style.transitionDelay = `${delay}ms`;
            });
        });

        // Smooth scroll for navigation
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Add parallax effect to header
        window.addEventListener('scroll', () => {
            const header = document.querySelector('.header');
            const scrolled = window.pageYOffset;
            header.style.backgroundPositionY = scrolled * 0.5 + 'px';
        });

        // Add hover effect to feature boxes
        document.querySelectorAll('.feature-box').forEach(box => {
            box.addEventListener('mouseenter', () => {
                box.style.transform = 'scale(1.02)';
                box.style.transition = 'transform 0.3s ease';
            });
            box.addEventListener('mouseleave', () => {
                box.style.transform = 'scale(1)';
            });
        });

        // Predictor Tool Functionality
        document.getElementById('launch-button').addEventListener('click', () => {
            document.getElementById('predictor-tool').classList.add('active');
            document.getElementById('predictor-tool').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        });

        document.getElementById('close-predictor').addEventListener('click', () => {
            document.getElementById('predictor-tool').classList.remove('active');
            document.getElementById('prediction-result').classList.remove('active');
        });

        document.getElementById('predict-button').addEventListener('click', () => {
            // Get form values
            const player = document.getElementById('player-select').value;
            const category = document.getElementById('stat-category').value;
            const line = document.getElementById('betting-line').value;
            
            // Validate inputs
            if (!player || !category || !line) {
                alert("Please fill out all fields");
                return;
            }
            
            // Generate prediction (in a real app, this would call an API)
            generatePrediction(player, category, line);
        });

        function generatePrediction(player, category, line) {
            // Mock data for demo purposes
            const playerData = {
                'lebron': {
                    name: 'LeBron James',
                    points: { avg: 25.7, std: 5.2 },
                    rebounds: { avg: 7.3, std: 2.1 },
                    assists: { avg: 7.8, std: 2.5 },
                    threes: { avg: 2.2, std: 1.4 }
                },
                'curry': {
                    name: 'Stephen Curry',
                    points: { avg: 29.5, std: 6.3 },
                    rebounds: { avg: 5.2, std: 1.8 },
                    assists: { avg: 6.3, std: 2.1 },
                    threes: { avg: 5.1, std: 1.9 }
                },
                'doncic': {
                    name: 'Luka Dončić',
                    points: { avg: 32.4, std: 6.7 },
                    rebounds: { avg: 8.6, std: 2.4 },
                    assists: { avg: 9.1, std: 2.9 },
                    threes: { avg: 3.5, std: 1.7 }
                },
                'jokic': {
                    name: 'Nikola Jokić',
                    points: { avg: 26.3, std: 5.4 },
                    rebounds: { avg: 12.4, std: 3.2 },
                    assists: { avg: 9.0, std: 2.8 },
                    threes: { avg: 1.1, std: 0.9 }
                },
                'embiid': {
                    name: 'Joel Embiid',
                    points: { avg: 33.1, std: 7.2 },
                    rebounds: { avg: 11.2, std: 3.0 },
                    assists: { avg: 4.2, std: 1.8 },
                    threes: { avg: 1.0, std: 0.8 }
                }
            };
            
            const categoryNames = {
                'points': 'Points',
                'rebounds': 'Rebounds',
                'assists': 'Assists',
                'threes': '3-Pointers'
            };
            
            // Generate prediction with some randomness
            const playerStats = playerData[player][category];
            const predictedValue = playerStats.avg + (Math.random() * 2 - 1) * playerStats.std;
            const roundedValue = Math.round(predictedValue * 10) / 10;
            
            // Calculate probability of going over
            const zScore = (line - playerStats.avg) / playerStats.std;
            const probability = 100 * (1 - normCDF(zScore));
            const roundedProbability = Math.round(probability);
            
            // Display results
            document.getElementById('result-player').textContent = playerData[player].name;
            document.getElementById('result-category').textContent = categoryNames[category];
            document.getElementById('result-value').textContent = roundedValue;
            document.getElementById('result-line').textContent = line;
            document.getElementById('result-probability').textContent = `${roundedProbability}%`;
            
            document.getElementById('prediction-result').classList.add('active');
        }
        
        // Helper function to calculate normal CDF (for probability)
        function normCDF(x) {
            const t = 1 / (1 + 0.2316419 * Math.abs(x));
            const d = 0.3989423 * Math.exp(-x * x / 2);
            const p = d * t * (0.3193815 + t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));
            return x > 0 ? 1 - p : p;
        }
    </script>
</body>
</html>
