import pandas as pd
import numpy as np
import re
import requests
from bs4 import BeautifulSoup
from scipy import stats

def create_player_url(first_name, last_name, season):
    """
    Create the correct Basketball Reference URL for a player.
    Format: first letter of last name/first 5 letters of last name + first 2 letters of first name
    Example: Stephen Curry -> c/curryst01
    
    Will try sequence numbers 01, 02, and 03 if needed.
    """
    # Format names correctly
    first_name = first_name.strip().lower()
    last_name = last_name.strip().lower()
   
    # Create the initial part of the player ID
    first_letter = last_name[0]
    last_name_part = last_name[:5]
    first_name_part = first_name[:2]
   
    # Construct base URL pattern
    base_url = f"https://www.basketball-reference.com/players/{first_letter}/"
    
    # Try sequence numbers 01, 02, and 03
    for seq_num in ['01', '02', '03']:
        player_id = f"{last_name_part}{first_name_part}{seq_num}"
        player_url = f"{base_url}{player_id}/gamelog/{season}"
       
        # Check if this URL exists
        try:
            response = requests.get(player_url)
            if response.status_code == 200:
                print(f"Found player page with ID: {player_id}")
                return player_url, player_id
        except Exception as e:
            print(f"Error accessing URL with sequence {seq_num}: {e}")
    
    # If we get here, we couldn't find a valid URL with any of the sequence numbers
    print(f"Player page not found. Attempted URLs with sequence numbers 01, 02, and 03.")
    print("The player ID might have a different format or the player might not exist in the database.")
    return None, None

def get_all_games(player_url):
    """Fetches and returns all available games of a player."""
    try:
        # Extract all tables from the page
        tables = pd.read_html(player_url)
       
        # Find the correct table (game logs usually have "Rk" in the first column)
        for table in tables:
            if "Rk" in table.columns:
                df = table
                break
        else:
            print(f"Error: No valid game log table found at {player_url}")
            return None
       
        # Clean the DataFrame
        df = df[df['Rk'] != 'Rk']  # Remove repeated headers
       
        # Filter out the "Total" row which typically has non-numeric 'Rk' value or empty 'Date'
        df = df[df['Rk'].astype(str).str.isnumeric()]
        df = df.reset_index(drop=True)
       
        # Add the season information based on URL
        season = re.search(r'/gamelog/(\d+)', player_url).group(1)
        df['Season'] = season
       
        # Convert date to datetime for proper sorting
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
       
        # Ensure numeric conversion for points, assists, rebounds
        for col in ['PTS', 'AST', 'TRB']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
       
        return df
    except Exception as e:
        print(f"Error fetching data from {player_url}: {e}")
        return None

def get_player_games_vs_team(player_id, team_abbr, start_season=2025, min_games=5):
    """
    Get games against a specific team across multiple seasons if needed.
    Returns a DataFrame with at least min_games (if available) against the team.
    """
    all_team_games = pd.DataFrame()
    current_season = start_season
    games_count = 0
    seasons_checked = 0
   
    while games_count < min_games and seasons_checked < 5:  # Limit to 5 seasons back
        # Create URL for the current season
        base_url = f"https://www.basketball-reference.com/players/{player_id[0]}/{player_id}/gamelog/{current_season}"
       
        try:
            # Get games for this season
            season_df = get_all_games(base_url)
           
            if season_df is not None and not season_df.empty:
                # Filter for games against the specific team
                season_df['Opp'] = season_df['Opp'].astype(str).str.strip()
                team_games = season_df[season_df['Opp'].str.contains(team_abbr, na=False)]
               
                if not team_games.empty:
                    all_team_games = pd.concat([all_team_games, team_games])
                    games_count = len(all_team_games)
           
            seasons_checked += 1
            current_season -= 1
           
        except Exception as e:
            print(f"Error processing season {current_season}: {e}")
            seasons_checked += 1
            current_season -= 1
   
    if all_team_games.empty:
        print(f"No games found against {team_abbr} in the last {seasons_checked} seasons")
        return None
   
    # Sort by date (most recent first)
    all_team_games = all_team_games.sort_values(by='Date', ascending=False)
   
    return all_team_games

def get_player_stats(first_name, last_name, current_season, team_abbr):
    """Gets the last 10 games of a player and their last 5 games against a specific team across seasons."""
    
    # Try to create player URL with sequence numbers 01, 02, and 03
    player_url = None
    player_id = None
    
    # Format names correctly
    first_name = first_name.strip().lower()
    last_name = last_name.strip().lower()
   
    # Create the initial part of the player ID
    first_letter = last_name[0]
    last_name_part = last_name[:5]
    first_name_part = first_name[:2]
   
    # Construct base URL pattern
    base_url = f"https://www.basketball-reference.com/players/{first_letter}/"
    
    # Try sequence numbers 01, 02, and 03
    for seq_num in ['01', '02', '03']:
        temp_player_id = f"{last_name_part}{first_name_part}{seq_num}"
        temp_player_url = f"{base_url}{temp_player_id}/gamelog/{current_season}"
       
        # Check if this URL exists
        try:
            response = requests.get(temp_player_url)
            if response.status_code == 200:
                print(f"Found player page with ID: {temp_player_id}")
                player_url = temp_player_url
                player_id = temp_player_id
                break
        except Exception as e:
            print(f"Error accessing URL with sequence {seq_num}: {e}")
    
    if not player_url:
        print(f"Player page not found. Attempted URLs with sequence numbers 01, 02, and 03.")
        print("The player ID might have a different format or the player might not exist in the database.")
        return None, None, None
    
    # Now that we have a valid player URL, get the game stats
    all_games_df = get_all_games(player_url)
   
    if all_games_df is None or all_games_df.empty:
        print("Could not find game log stats.")
        return None, None, None
   
    # Filter out inactive games for recent games
    active_games = all_games_df.dropna(subset=['PTS', 'AST', 'TRB'])
   
    # Get last 10 active games (sort by date first)
    active_games = active_games.sort_values(by='Date', ascending=False)
    last_10_games = active_games.head(10)
   
    print("\nLast 10 Games:")
    print(last_10_games[['Date', 'Opp', 'PTS', 'AST', 'TRB']])
   
    # Get games against the team across multiple seasons if needed
    all_team_games = get_player_games_vs_team(player_id, team_abbr, current_season)
   
    if all_team_games is None or all_team_games.empty:
        print(f"\nNo games found against {team_abbr}")
        return last_10_games, pd.DataFrame(), player_id
   
    # Get the last 5 games (or all if fewer) against that team
    last_games_vs_team = all_team_games.head(5)
   
    print(f"\nLast {len(last_games_vs_team)} Games vs {team_abbr} (across seasons):")
    print(last_games_vs_team[['Season', 'Date', 'Opp', 'PTS', 'AST', 'TRB']])
   
    return last_10_games, last_games_vs_team, player_id

def calculate_averages_deviation(player_url, team_abbr, player_id):
    all_games_df = get_all_games(player_url)
   
    if all_games_df is None or all_games_df.empty:
        print("Could not find game log stats.")
        return None
   
    # Filter out inactive games and DNPs
    active_games = all_games_df.dropna(subset=['PTS', 'AST', 'TRB'])
   
    # Calculate season averages
    season_avg = {
        'PTS': active_games['PTS'].mean(),
        'AST': active_games['AST'].mean(),
        'TRB': active_games['TRB'].mean()
    }
   
    # Sort by date descending and get last 10 games
    active_games = active_games.sort_values(by='Date', ascending=False)
    last_10_games = active_games.head(10)
   
    # Calculate last 10 games averages
    last_10_avg = {
        'PTS': last_10_games['PTS'].mean(),
        'AST': last_10_games['AST'].mean(),
        'TRB': last_10_games['TRB'].mean()
    }
   
    # Calculate standard deviation for last 10 games
    last_10_std = {
        'PTS': last_10_games['PTS'].std(),
        'AST': last_10_games['AST'].std(),
        'TRB': last_10_games['TRB'].std()
    }
   
    # Get games against the team across multiple seasons if needed
    current_season = int(re.search(r'/gamelog/(\d+)', player_url).group(1))
    all_team_games = get_player_games_vs_team(player_id, team_abbr, current_season)
   
    # Get last 5 games against the team (or all if fewer)
    if all_team_games is not None and not all_team_games.empty:
        last_games_vs_team = all_team_games.head(5)
       
        # Calculate averages against this team
        last_vs_team_avg = {
            'PTS': last_games_vs_team['PTS'].mean(),
            'AST': last_games_vs_team['AST'].mean(),
            'TRB': last_games_vs_team['TRB'].mean()
        }
       
        # Calculate standard deviation against this team
        last_vs_team_std = {
            'PTS': last_games_vs_team['PTS'].std(),
            'AST': last_games_vs_team['AST'].std(),
            'TRB': last_games_vs_team['TRB'].std()
        }
    else:
        last_vs_team_avg = {
            'PTS': float('nan'),
            'AST': float('nan'),
            'TRB': float('nan')
        }
        last_vs_team_std = {
            'PTS': float('nan'),
            'AST': float('nan'),
            'TRB': float('nan')
        }
   
    # Create a DataFrame for display
    averages_df = pd.DataFrame({
        'Stat': ['PTS', 'AST', 'TRB'],
        'Season Avg': [season_avg['PTS'], season_avg['AST'], season_avg['TRB']],
        'Last 10 Games Avg': [last_10_avg['PTS'], last_10_avg['AST'], last_10_avg['TRB']],
        f'Last Games vs {team_abbr} Avg': [last_vs_team_avg['PTS'], last_vs_team_avg['AST'], last_vs_team_avg['TRB']]
    })
   
    std_df = pd.DataFrame({
        'Stat': ['PTS', 'AST', 'TRB'],
        'Last 10 Games StdDev': [last_10_std['PTS'], last_10_std['AST'], last_10_std['TRB']],
        f'Last Games vs {team_abbr} StdDev': [last_vs_team_std['PTS'], last_vs_team_std['AST'], last_vs_team_std['TRB']]
    })
   
    # Round for cleaner display
    for col in averages_df.columns[1:]:
        averages_df[col] = averages_df[col].round(1)
   
    for col in std_df.columns[1:]:
        std_df[col] = std_df[col].round(1)
   
    # Add info about number of games vs team
    games_count = len(all_team_games) if all_team_games is not None else 0
    games_used = min(5, games_count)
   
    print(f"\nAverages Summary (using {games_used} most recent games vs {team_abbr}):")
    print(averages_df)
   
    print(f"\nStandard Deviation Summary:")
    print(std_df)
   
    return averages_df, std_df, last_10_games, all_team_games

def get_team_abbreviation_map():
    """Returns a dictionary mapping team names to their abbreviations."""
    return {
        "atlanta": "ATL", "hawks": "ATL",
        "boston": "BOS", "celtics": "BOS",
        "brooklyn": "BRK", "nets": "BRK",
        "charlotte": "CHO", "hornets": "CHO",
        "chicago": "CHI", "bulls": "CHI",
        "cleveland": "CLE", "cavaliers": "CLE", "cavs": "CLE",
        "dallas": "DAL", "mavericks": "DAL", "mavs": "DAL",
        "denver": "DEN", "nuggets": "DEN",
        "detroit": "DET", "pistons": "DET",
        "golden state": "GSW", "warriors": "GSW",
        "houston": "HOU", "rockets": "HOU",
        "indiana": "IND", "pacers": "IND",
        "la clippers": "LAC", "los angeles clippers": "LAC", "clippers": "LAC",
        "la lakers": "LAL", "los angeles lakers": "LAL", "lakers": "LAL",
        "memphis": "MEM", "grizzlies": "MEM",
        "miami": "MIA", "heat": "MIA",
        "milwaukee": "MIL", "bucks": "MIL",
        "minnesota": "MIN", "timberwolves": "MIN", "wolves": "MIN",
        "new orleans": "NOP", "pelicans": "NOP", "pels": "NOP",
        "new york": "NYK", "knicks": "NYK",
        "oklahoma city": "OKC", "thunder": "OKC",
        "orlando": "ORL", "magic": "ORL",
        "philadelphia": "PHI", "76ers": "PHI", "sixers": "PHI",
        "phoenix": "PHO", "suns": "PHO",
        "portland": "POR", "trail blazers": "POR", "blazers": "POR",
        "sacramento": "SAC", "kings": "SAC",
        "san antonio": "SAS", "spurs": "SAS",
        "toronto": "TOR", "raptors": "TOR",
        "utah": "UTA", "jazz": "UTA",
        "washington": "WAS", "wizards": "WAS"
    }

# Calculate probability of exceeding betting line
def calculate_betting_probability(stat_values, line_value, mean=None, std=None):
    """
    Calculate the probability of a player exceeding a betting line.
   
    Parameters:
    - stat_values: Series or array of historical stat values
    - line_value: The betting line to analyze
    - mean: Optional pre-calculated mean (if None, calculated from stat_values)
    - std: Optional pre-calculated standard deviation (if None, calculated from stat_values)
   
    Returns:
    - Probability of exceeding the line (based on normal distribution)
    - Historical frequency of exceeding the line
    - Mean value
    - Standard deviation
    """
    # Remove NaN values
    stat_values = stat_values.dropna()
   
    if len(stat_values) < 3:
        return None, None, None, None
   
    # Calculate mean and standard deviation if not provided
    if mean is None:
        mean = stat_values.mean()
    if std is None:
        std = stat_values.std()
   
    # Calculate historical frequency
    historical_freq = (stat_values > line_value).mean()
   
    # Calculate probability using normal distribution
    if std > 0:  # Avoid division by zero
        z_score = (line_value - mean) / std
        prob_over = 1 - stats.norm.cdf(z_score)
    else:
        # If std is 0, all values are the same
        prob_over = 1.0 if mean > line_value else 0.0
   
    return prob_over, historical_freq, mean, std

# Analyze betting lines
def analyze_betting_lines(player_name, team_abbr, averages_df, std_df, last_10_games, team_games):
    """Analyze betting lines for the specified player against the given team."""
    print("\n" + "="*50)
    print(f"BETTING LINE ANALYSIS FOR {player_name} vs {team_abbr}")
    print("="*50)
   
    # Add PRA (Points + Rebounds + Assists) to last 10 games
    if 'PTS' in last_10_games.columns and 'AST' in last_10_games.columns and 'TRB' in last_10_games.columns:
        last_10_games['PRA'] = last_10_games['PTS'] + last_10_games['AST'] + last_10_games['TRB']
   
    # Add PRA to team games
    if team_games is not None and not team_games.empty:
        if 'PTS' in team_games.columns and 'AST' in team_games.columns and 'TRB' in team_games.columns:
            team_games['PRA'] = team_games['PTS'] + team_games['AST'] + team_games['TRB']
   
    # Calculate PRA averages and standard deviations
    if 'PRA' in last_10_games.columns:
        pra_last_10_avg = last_10_games['PRA'].mean()
        pra_last_10_std = last_10_games['PRA'].std()
       
        # Add PRA to averages_df
        pra_row = pd.Series({
            'Stat': 'PRA',
            'Season Avg': last_10_games['PRA'].mean(),  # Using last 10 as proxy for season
            'Last 10 Games Avg': pra_last_10_avg
        })
       
        if team_games is not None and not team_games.empty and 'PRA' in team_games.columns:
            pra_team_avg = team_games['PRA'].mean()
            pra_team_std = team_games['PRA'].std()
            pra_row[f'Last Games vs {team_abbr} Avg'] = pra_team_avg
        else:
            pra_team_avg = float('nan')
            pra_team_std = float('nan')
            pra_row[f'Last Games vs {team_abbr} Avg'] = float('nan')
       
        # Add PRA to std_df
        pra_std_row = pd.Series({
            'Stat': 'PRA',
            'Last 10 Games StdDev': pra_last_10_std,
            f'Last Games vs {team_abbr} StdDev': pra_team_std
        })
       
        # Append to dataframes
        averages_df = pd.concat([averages_df, pd.DataFrame([pra_row])], ignore_index=True)
        std_df = pd.concat([std_df, pd.DataFrame([pra_std_row])], ignore_index=True)
   
    all_stats = ['PTS', 'AST', 'TRB', 'PRA']
    betting_lines = {}
   
    # Prompt for betting lines
    print("\nEnter betting lines (leave blank to skip):")
    for stat in all_stats:
        line_input = input(f"{stat} line: ")
        if line_input.strip():
            try:
                betting_lines[stat] = float(line_input)
            except ValueError:
                print(f"Invalid input for {stat}. Skipping.")
   
    if not betting_lines:
        print("No betting lines entered. Skipping analysis.")
        return
   
    # Analyze each entered betting line
    results = []
   
    for stat, line in betting_lines.items():
        print(f"\n{'-'*40}")
        print(f"Analysis for {player_name} {stat} > {line}")
        print(f"{'-'*40}")
       
        # Get index for this stat
        try:
            stat_idx = averages_df[averages_df['Stat'] == stat].index[0]
           
            # Get means and standard deviations from our pre-calculated DataFrames
            season_avg = averages_df.loc[stat_idx, 'Season Avg']
            last_10_avg = averages_df.loc[stat_idx, 'Last 10 Games Avg']
            team_avg = averages_df.loc[stat_idx, f'Last Games vs {team_abbr} Avg']
           
            last_10_std = std_df.loc[stat_idx, 'Last 10 Games StdDev']
            team_std = std_df.loc[stat_idx, f'Last Games vs {team_abbr} StdDev']
           
            # Calculate probabilities based on last 10 games
            prob_over_10, freq_over_10, _, _ = calculate_betting_probability(
                last_10_games[stat], line, last_10_avg, last_10_std
            )
           
            # Calculate probabilities based on games against this team
            if team_games is not None and not team_games.empty and stat in team_games.columns:
                prob_over_team, freq_over_team, _, _ = calculate_betting_probability(
                    team_games[stat], line, team_avg, team_std
                )
            else:
                prob_over_team, freq_over_team = None, None
           
            # Weighted average probability (give more weight to last 10 games)
            if prob_over_team is not None:
                # 60% weight to recent form, 40% to team-specific stats
                final_prob = 0.6 * prob_over_10 + 0.4 * prob_over_team
            else:
                final_prob = prob_over_10
           
            # Print results
            print(f"Season Average: {season_avg:.1f}")
            print(f"Last 10 Games Average: {last_10_avg:.1f}")
           
            if not np.isnan(team_avg):
                print(f"Average vs {team_abbr}: {team_avg:.1f}")
           
            print(f"\nLast 10 Games:")
            print(f"- Exceeded {line} in {int(freq_over_10*100)}% of games")
            print(f"- Statistical probability of exceeding {line}: {prob_over_10*100:.1f}%")
           
            if prob_over_team is not None and not np.isnan(team_avg):
                print(f"\nGames vs {team_abbr}:")
                print(f"- Exceeded {line} in {int(freq_over_team*100)}% of games")
                print(f"- Statistical probability of exceeding {line}: {prob_over_team*100:.1f}%")
           
            print(f"\nFINAL RECOMMENDATION:")
            if final_prob > 0.65:
                recommendation = f"STRONG OVER ({final_prob*100:.1f}%)"
            elif final_prob > 0.55:
                recommendation = f"LEAN OVER ({final_prob*100:.1f}%)"
            elif final_prob < 0.35:
                recommendation = f"STRONG UNDER ({(1-final_prob)*100:.1f}%)"
            elif final_prob < 0.45:
                recommendation = f"LEAN UNDER ({(1-final_prob)*100:.1f}%)"
            else:
                recommendation = f"COIN FLIP ({final_prob*100:.1f}%)"
           
            print(f"{stat} > {line}: {recommendation}")
           
            # Store results for summary
            results.append({
                'Stat': stat,
                'Line': line,
                'Probability': final_prob,
                'Recommendation': recommendation
            })
        except (IndexError, KeyError) as e:
            print(f"Error analyzing {stat}: {e}")
            continue
   
    # Print summary
    print("\n" + "="*50)
    print("SUMMARY OF RECOMMENDATIONS")
    print("="*50)
   
    for result in results:
        print(f"{result['Stat']} > {result['Line']}: {result['Recommendation']}")

def main():
    # Get current season
    current_season = 2025  # You could also calculate this dynamically
   
    # Get player name from user
    print("Enter player information:")
    first_name = input("First name: ")
    last_name = input("Last name: ")
   
    # Get team input from user
    print("\nEnter opponent team information (e.g., 'Lakers', 'GSW', 'Boston'):")
    team_input = input("Team: ").lower()
   
    # Map team input to abbreviation
    team_map = get_team_abbreviation_map()
    team_abbr = None
   
    # Check if direct input matches an abbreviation
    team_abbr_upper = team_input.upper()
    if team_abbr_upper in [abbr for abbr in team_map.values()]:
        team_abbr = team_abbr_upper
    else:
        # Look up the abbreviation from the team name
        for name, abbr in team_map.items():
            if team_input in name:
                team_abbr = abbr
                break
   
    if not team_abbr:
        print(f"Could not find team abbreviation for '{team_input}'")
        print("Using common abbreviations like 'LAL' for Lakers, 'GSW' for Warriors, etc.")
        team_abbr = input("Please enter the correct team abbreviation: ").upper()
   
    print(f"\nAnalyzing {first_name} {last_name}'s stats against {team_abbr}...")
    print("(Will check previous seasons if needed to find at least 5 games)")
   
    # Get stats using the updated function that handles multiple sequence numbers
    last_10_games, team_games, player_id = get_player_stats(first_name, last_name, current_season, team_abbr)
    
    if player_id is None:
        print("Could not find player. Exiting.")
        return
    
    # Get the player URL now that we have the correct player_id
    first_letter = last_name[0].lower()
    player_url = f"https://www.basketball-reference.com/players/{first_letter}/{player_id}/gamelog/{current_season}"
    
    # Calculate averages
    averages_df, std_df, _, all_team_games = calculate_averages_deviation(player_url, team_abbr, player_id)
   
    # New section: Betting line analysis
    player_name = f"{first_name} {last_name}"
    analyze_betting_lines(player_name, team_abbr, averages_df, std_df, last_10_games, all_team_games)

if __name__ == "__main__":
    main()
